cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(swirl)
rm(list=ls())
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux_gnu")
filter(cran, size > 100500, r_os == "linux_gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
load("C:/Users/i55802/datasciencecoursera/getdata-data-ss06hid.csv")
setwd("C:/Users/i55802/datasciencecoursera")
read.csv("C:/Users/i55802/datasciencecoursera/getdata-data-ss06hid.csv")
comm <- read.csv("C:/Users/i55802/datasciencecoursera/getdata-data-ss06hid.csv")
commdf <-tbl_df(comm)
commdf
summarize(commdf, val == 24)
summarize(commdf, VAL == 24)
summarize(commdf, VAL == "24")
select(commdf, VAL)
filter(commdf, VAL == "24")
?summariza
summarize(commdf, VAL)
?Summarize
?summarize
summarise(commdf, VAL = 24)
?dplyr
browseVignettes(package = "dplyr")
mil < filter(commdf, VAL = 24)
mil <- filter(commdf, VAL = 24)
mil <- filter(commdf, VAL == 24)
mil <- read.table("C:/Users/i55802/datasciencecoursera/getdata-data-DATA.gov_NGAP.xlsx")
mildf <- tbl_df(mil)
mildf
mil
?read.table
fileUrl1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(url=fileUrl1, destfile="gov_NGAP.xlsx", mode="w", method="curl")
dateDownloaded <- date()
print(dateDownloaded)
download.packages("xlsx")
download.packages(xlsx)
dat <- read.table(file="gov_NGAP.xlsx",sheetIndex=1,colIndex=colIndx,startRow=18, endRow=23, header=TRUE)
install.packages("xlsx")
dat <- read.table(file="gov_NGAP.xlsx",sheetIndex=1,colIndex=colIndx,startRow=18, endRow=23, header=TRUE)
dat <- read.xlsx(file="gov_NGAP.xlsx",sheetIndex=1,colIndex=colIndx,startRow=18, endRow=23, header=TRUE)
library(xlsx)
dat <- read.xlsx(file="gov_NGAP.xlsx",sheetIndex=1,colIndex=colIndx,startRow=18, endRow=23, header=TRUE)
dat <- read.xlsx(file="getdata-data-DATA.gov_NGAP.xlsx",sheetIndex=1,colIndex=colIndx,startRow=18, endRow=23, header=TRUE)
dat <- read.xlsx(file="getdata-data-DATA.gov_NGAP.xlsx",sheetIndex=1,colIndex=colIndex,startRow=18, endRow=23, header=TRUE)
dat <- read.xlsx(file="getdata-data-DATA.gov_NGAP.xlsx",sheetIndex=1, startRow=18, endRow=23, header=TRUE)
sum(dat$Zip*dat$Ext,na.rm=T)
install.packages(xml)
install.packages("XML")
library(XML)
fileUrl2 <- "http://d396qusza40orc.cloudfront.net/getdata/data/restaurants.xml"
doc <- xmlTreeParse(file=fileUrl2,useInternal=TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
zipcode <- xpathSApply(rootNode,"//zipcode",xmlValue)
length(zipcode[zipcode==21231])
library(data.table)
DT <- fread(input="fsspid.csv", sep=",")
DT <- fread(input="getdata-data-ss06hid.csv", sep=",")
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
system.time(rowMeans(DT)[DT$SEX==1], rowMeans(DT)[DT$SEX==2])
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
system.time(mean(DT$pwgtp15,by=DT$SEX))
DT[,mean(pwgtp15),by=SEX]
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
DT
head(DT)
DT <- fread(input="getdata-data-ss06pid.csv", sep=",")
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
system.time(rowMeans(DT)[DT$SEX==1], rowMeans(DT)[DT$SEX==2])
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(DT[,mean(pwgtp15),by=SEX])
DT[,mean(pwgtp15),by=SEX]
system.time(DT[,mean(pwgtp15),by=SEX])
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
mean(DT$pwgtp15,by=DT$SEX)
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(mean(DT$pwgtp15,by=DT$SEX))
tapply(DT$pwgtp15,DT$SEX,mean)
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
sapply(split(DT$pwgtp15,DT$SEX),mean)
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
install.packages("RMySQL")
library(RMySQL)
?"RMySQL"
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
library(RMySQL)
library(XML)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "4237ac02f750f34b275a",
secret = "eac5608bb5294884dc7782bc59dded6e402301ba")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
output <- content(req)
list(output[[4]]$name, output[[4]]$created_at)
list(output[[5]]$name, output[[5]]$created_at)
list(output[[3]]$name, output[[3]]$created_at)
list(output[[2]]$name, output[[2]]$created_at)
list(output[[1]]$name, output[[1]]$created_at)
list(output[[6]]$name, output[[6]]$created_at)
list(output[[7]]$name, output[[7]]$created_at)
list(output[[8]]$name, output[[8]]$created_at)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
f <- file.path(getwd(), "ss06pid.csv")
download.file(url, f)
acs <- data.table(read.csv(f))
library(data.table)
acs <- data.table(read.csv(f))
sqldf("select * from acs")
library(RMySQL)
install.packages("sqldf")
library(sqldf)
sqldf("select * from acs")
sqldf("select pwgtp1 from acs")
library(sqldf)
library(sqldf)
sqldf("select pwgtp1 from acs")
head(sqldf("select * from iris",drv='SQLite'))
head(sqldf("select pwgtp1 from acs",drv='SQLite'))
sqldf("select pwgtp1 from acs",drv='SQLite')
head(sqldf("select pwgtp1 from acs",drv='SQLite'))
unique(acs$AGEP)
sqldf("select AGEP where unique from acs")
sqldf("select AGEP where unique from acs", drv='SQLite')
sqldf("select distinct AGEP from acs",drv='SQLite')
connection <- url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode <- readLines(connection)
close(connection)
c(nchar(htmlCode[10]), nchar(htmlCode[20]), nchar(htmlCode[30]), nchar(htmlCode[100]))
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
lines <- readLines(url, n=10)
w <- c(1, 9, 5, 4, 1, 3, 5, 4, 1, 3, 5, 4, 1, 3, 5, 4, 1, 3)
colNames <- c("filler", "week", "filler", "sstNino12", "filler", "sstaNino12", "filler", "sstNino3", "filler", "sstaNino3", "filler", "sstNino34", "filler", "sstaNino34", "filler", "sstNino4", "filler", "sstaNino4")
d <- read.fwf(url, w, header=FALSE, skip=4, col.names=colNames)
d <- d[, grep("^[^filler]", names(d))]
sum(d[, 4])
library(swirl)
start()
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
hour(this_moment)
my_date <- ymd("1989-05-17")
my_Date
my_Date
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
?now
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_Time
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
library(data.table)
library(quantmod)
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
f <- file.path(getwd(), "ss06hid.csv")
download.file(url, f)
dt <- data.table(read.csv(f))
varNames <- names(dt)
varNamesSplit <- strsplit(varNames, "wgtp")
varNamesSplit[[123]]
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
f <- file.path(getwd(), "GDP.csv")
download.file(url, f)
dtGDP <- data.table(read.csv(f, skip = 4, nrows = 215, stringsAsFactors = FALSE))
dtGDP <- dtGDP[X != ""]
dtGDP <- dtGDP[, list(X, X.1, X.3, X.4)]
setnames(dtGDP, c("X", "X.1", "X.3", "X.4"), c("CountryCode", "rankingGDP",
"Long.Name", "gdp"))
gdp <- as.numeric(gsub(",", "", dtGDP$gdp))
mean(gdp, na.rm = TRUE)
isUnited <- grepl("^United", dtGDP$Long.Name)
summary(isUnited)
grep("*United",countryNames), 5
grep("^United",countryNames), 3
grep("United$",countryNames), 3
grepl("*United",countryNames), 5
grepl("United$",countryNames), 3
grepl("^United",countryNames), 3
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
f <- file.path(getwd(), "EDSTATS_Country.csv")
download.file(url, f)
dtEd <- data.table(read.csv(f))
dt <- merge(dtGDP, dtEd, all = TRUE, by = c("CountryCode"))
isFiscalYearEnd <- grepl("fiscal year end", tolower(dt$Special.Notes))
isJune <- grepl("june", tolower(dt$Special.Notes))
table(isFiscalYearEnd, isJune)
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
addmargins(table(year(sampleTimes), weekdays(sampleTimes)))
filesPath <- "C:/Users/jb/Documents/Analytics course/coursera getting and cleaning data/course project/UCI HAR Dataset"
setwd(filesPath)
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileUrl,destfile="./data/Dataset.zip",method="curl")
getwd()
filesPath <- "C:/Users/i55802/datasciencecoursera"
source('C:/Users/i55802/datasciencecoursera/run_analysis.R')
source('C:/Users/i55802/datasciencecoursera/run_analysis.R')
source('C:/Users/i55802/datasciencecoursera/run_analysis.R')
source('C:/Users/i55802/datasciencecoursera/run_analysis.R')
source('C:/Users/i55802/datasciencecoursera/run_analysis.R')
source('C:/Users/i55802/datasciencecoursera/run_analysis.R')
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileUrl,destfile="./data/Dataset.zip",method="curl")
download.file(fileUrl,destfile="./data/Dataset.zip")
unzip(zipfile = "./data/Dataset.zip", exdir = './data')
dataSubjectTrain <- tbl_df(read.table(file.path(filesPath, "train", "subject_train.txt")))
source('C:/Users/i55802/datasciencecoursera/run_analysis.R')
source('C:/Users/i55802/datasciencecoursera/run_analysis.R')
source('C:/Users/i55802/datasciencecoursera/run_analysis.R')
source('C:/Users/i55802/datasciencecoursera/run_analysis.R')
#Extract the Data
filesPath <- "C:/Users/i55802/datasciencecoursera/data/UCI HAR Dataset"
#Subject Data
dataSubjectTrain <- tbl_df(read.table(file.path(filesPath, "train", "subject_train.txt")))
dataSubjectTest  <- tbl_df(read.table(file.path(filesPath, "test" , "subject_test.txt" )))
#Activity Data
dataActivityTrain <- tbl_df(read.table(file.path(filesPath, "train", "Y_train.txt")))
dataActivityTest  <- tbl_df(read.table(file.path(filesPath, "test" , "Y_test.txt" )))
#Data Files
dataTrain <- tbl_df(read.table(file.path(filesPath, "train", "X_train.txt" )))
dataTest  <- tbl_df(read.table(file.path(filesPath, "test" , "X_test.txt" )))
source('C:/Users/i55802/datasciencecoursera/run_analysis.R')
source('C:/Users/i55802/datasciencecoursera/run_analysis.R')
source('C:/Users/i55802/datasciencecoursera/run_analysis.R')
dataFeaturesMeanStd <- grep("mean\\(\\)|std\\(\\)",dataFeatures$FeatureName,value=TRUE)
###Extracts only the measurements on the mean and standard deviation for each measurement.
#Pull the Mean and Std from the Feature file
dataFeaturesMeanStd <- grep("mean\\(\\)|std\\(\\)",dataFeatures$FeatureName,value=TRUE)
#Adding Subject and Activity Num Variables to Mean and Std Measurements
dataFeaturesMeanStd <- union(c("Subject","ActivityNum"), dataFeaturesMeanStd)
dataTable<- subset(dataTable,select=dataFeaturesMeanStd)
dataFeaturesMeanStd <- grep("mean\\(\\)|std\\(\\)",dataFeatures$FeatureName,value=TRUE)
dataFeaturesMeanStd <- union(c("Subject","ActivityNum"), dataFeaturesMeanStd)
dataTable<- subset(dataTable,select=dataFeaturesMeanStd)
dataFeaturesMeanStd <- union(c("Subject","ActivityNum"), dataFeaturesMeanStd)
dataTable<- subset(dataTable,select=dataFeaturesMeanStd)
dataTable <- subset(dataTable, select = dataFeaturesMeanStd)
?subset
head(dataFeaturesMeanStd)
dataFeaturesMeanStd
dataTable$ActivityName <- as.character(dataTable$ActivityName)
dataAggr<- aggregate(. ~ subject - ActivityName, data = dataTable, mean)
dataTable<- tbl_df(arrange(dataAggr,Subject,ActivityName))
dataTable$ActivityName <- as.character(dataTable$ActivityName)
source('C:/Users/i55802/datasciencecoursera/run_analysis.R')
source('C:/Users/i55802/datasciencecoursera/run_analysis.R')
source('C:/Users/i55802/datasciencecoursera/run_analysis.R')
source('C:/Users/i55802/datasciencecoursera/run_analysis.R')
source('C:/Users/i55802/datasciencecoursera/run_analysis.R')
head(str(dataTable),2)
names(dataTable)<-gsub("std()", "STD", names(dataTable))
names(dataTable)<-gsub("mean()", "MEAN", names(dataTable))
names(dataTable)<-gsub("^t", "Time", names(dataTable))
names(dataTable)<-gsub("^f", "Frequency", names(dataTable))
names(dataTable)<-gsub("Acc", "Accelerometer", names(dataTable))
names(dataTable)<-gsub("Gyro", "Gyroscope", names(dataTable))
names(dataTable)<-gsub("Mag", "Magnitude", names(dataTable))
names(dataTable)<-gsub("BodyBody", "Body", names(dataTable))
head(str(dataTable),2)
source('C:/Users/i55802/datasciencecoursera/run_analysis.R')
head(str(dataTable),2)
write.table(dataTable, "TidyData.txt", row.name=FALSE)
tidy_data <- dcast(dataTable, Subject + ActivityLabels ~ variable, mean)
tidy_data <- dcast(dataTable, Subject + ActivityName ~ variable, mean)
tidy_data <- dcast(dataTable, Subject + ActivityName ~ mean)
?dcast
tidy_data <- dcast(dataTable, Subject + ActivityNum ~ mean)
tidy_data <- dcast(dataTable, Subject + ActivityNum, fun=mean)
tidy_data <- dcast(dataTable, Subject ~ ActivityNum, fun=mean)
tidy_data <- dcast(dataTable, Subject + ActivityName, fun=mean)
melt_dataTable <- melt(dataTable, id = id_labels, measure.vars = data_labels)
tidy_data <- dcast(dataTable, Subject + ActivityName ~ mean)
tidy_data <- dcast(dataTable, Subject + ActivityName ~ mean, value.var = c("Subject", "ActivityName"))
tidy_data <- dcast(dataTable, "Subject" + "ActivityName" ~ mean)
melt_data <- melt(dataTable, id=c("Subject","ActivityName"))
tidy <- dcast(melt_data, Subject+ActivityName ~ ActivityNum, mean)
tidy <- dcast(melt_data, Subject+ActivityName ~ variable, mean)
tidy
tidy_data <- dcast(melt_data, Subject+ActivityName ~ mean)
tidy_data <- dcast(melt_data, Subject+ActivityName, fun=mean)
tidy <- dcast(melt_data, Subject+ActivityName ~ ActivityNum, mean)
tidy <- dcast(melt_data, Subject+ActivityName ~ variable, mean)
tidy_data <- dcast(melt_data, Subject+ActivityName ~ variable, mean)
write.table(tidy_data, "TidyData.txt", row.name=FALSE)
tidy_data
write.table(tidy_data, "TidyData.txt", row.name=FALSE)
tidy_data
source('C:/Users/i55802/datasciencecoursera/run_analysis.R')
source('C:/Users/i55802/datasciencecoursera/run_analysis.R')
source('C:/Users/i55802/datasciencecoursera/run_analysis.R')
source('C:/Users/i55802/datasciencecoursera/run_analysis.R')
source('C:/Users/i55802/datasciencecoursera/run_analysis.R')
source('C:/Users/i55802/datasciencecoursera/run_analysis.R')
library(plyr)
library(ggplot2)
library(data.table)
getwd()
##Load Required Libraries
library(plyr)
library(ggplot2)
library(data.table)
#Read the Two EPA Files
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
total.emissions <- with(NEI, aggregate(Emissions, by = list(year), sum))
source('C:/Users/i55802/datasciencecoursera/plot1.R')
?qplot
library(ggplot2)
?qplot
source('C:/Users/i55802/datasciencecoursera/ plot3.R')
source('C:/Users/i55802/datasciencecoursera/ plot3.R')
##Read the Two EPA Files
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
##Pull Just Baltimore City Records
NEI_baltimore <- NEI[which(NEI$fips == "24510"), ]
##Function to Aggregate Total Emissions in NEI_baltimore File
total_emissions_baltimore <- with(NEI_baltimore, aggregate(Emissions, by = list(yes, sum)))
colnames(total_emissions_baltimore) <- c("year", "Emissions")
#Subset Baltimore Total Emissions by Pollutant Type
total_emissions_baltimore_type <- ddply(NEI_24510, .(type, year), summarize, Emissions = sum(Emissions))
total_emissions_baltimore_type$Pollutant_Type <- total_emissions_baltimore_type$type
source('C:/Users/i55802/datasciencecoursera/ plot3.R')
source('C:/Users/i55802/datasciencecoursera/ plot3.R')
getwd
getwd()
source('C:/Users/i55802/datasciencecoursera/plot3.R')
source('C:/Users/i55802/datasciencecoursera/plot2.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('C:/Users/i55802/datasciencecoursera/plot3.R')
library(plyr)
library(ggplot2)
library(data.table)
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
NEI_DT <- data.table(NEI)
SCC_DT <- data.table(SCC)
total_emissions <- with(NEI, aggregate(Emissions, by = list(year), sum))
plot(total_emissions, type = "b", pch = 18, col = "red", ylab = "PM2.5 Emissions",
xlab = "Year", main = "Total Emissions")
NEI_baltimore <- NEI[which(NEI$fips == "24510"), ]
total_emissions_baltimore <- with(NEI_baltimore, aggregate(Emissions, by = list(year), sum))
colnames(total_emissions_baltimore) <- c("year", "Emissions")
plot(total_emissions_baltimore$year, total_emissions_baltimore$Emissions, type = "b",
pch = 18, col = "red", ylab = "PM2.5 Emissions", xlab = "Year", main = "Total Emissions Baltimore")
total_emissions_baltimore_type <- ddply(NEI_baltimore, .(type, year), summarize, Emissions = sum(Emissions))
total_emissions_baltimore_type$Pollutant_Type <- total_emissions_baltimore_type$type
qplot(year, Emissions, data = total_emissions_baltimore_type, group = Pollutant_Type, color = Pollutant_Type, geom = c("point", "line"), ylab = expression("Total PM2.5 Emissions"[2.5]), xlab = "Year", main = "Total Emissions in Baltimore City by Pollutant Type")
coal_scc <- SCC_DT[grep("Coal", SCC_Level_Three), SCC]
coal_scc <- SCC_DT[grep("Coal", SCC.Level.Three), SCC]
coal_emissions <- NEI_DT[SCC %in% coal_scc, sum(Emissions), by = "year"]
colnames(coal_emissions) <- c("year", "Emissions")
g <- ggplot(coal_emissions, aes(year, Emissions))
g + geom_point(color = "red") + geom_line(color = "green") + labs(x = "Year") +
labs(y = expression("Total Emissions, PM"[2.5])) + labs(title = "Emissions from Coal Combustion for the US")
motor_vehicle_scc <- SCC_DT[grep("[Mm]obile|[Vv]ehicles", EI.Sector), SCC]
motor_vehicle_emissions_baltimore <- NEI_DT[SCC %in% motor_vehicle_scc, sum(Emissions),
by = c("year", "fips")][fips == "24510"]
colnames(motor_vehicle_emissions_baltimore) <- c("year", "fips", "Emissions")
g <- ggplot(motor_vehicle_emissions_baltimore, aes(year, Emissions))
g + geom_point(color = "red") + geom_line(color = "green") + labs(x = "Year") +
labs(y = expression("Total Emissions, PM"[2.5])) + labs(title = "Total Emissions from Motor Vehicle Sources in Baltimore City")
g + geom_point(color = "red") + geom_line(color = "red") + labs(x = "Year") +
labs(y = expression("Total Emissions, PM"[2.5])) + labs(title = "Total Emissions from Motor Vehicle Sources in Baltimore City")
motor_vehicle_emissions = NEI_DT[SCC %in% motor_vehicle_scc, sum(Emissions), by = c("year", "fips")]
colnames(motor_vehicle_emissions) <- c("year", "fips", "Emissions")
g <- ggplot(motor_vehicle_emissions[fips == "24510" | fips == "06037"], aes(year, log(V1)))
g + geom_point() + geom_line(aes(color = fips)) + scale_color_discrete(name = "County", breaks = c("06037", "24510"), labels = c("Los Angeles", "Baltimore")) + labs(x = "Year") + labs(y = expression("Total Emissions, PM"[2.5])) + labs(title = "Annual Motor Vehicle Emissions")
?ggplot
g + geom_point() + geom_line(aes(color = fips)) + scale_color_discrete(name = "County", breaks = c("06037", "24510"), labels = c("Los Angeles", "Baltimore")) + labs(x = "Year") + labs(y = expression("Total Emissions, PM"[2.5])) + labs(title = "Annual Motor Vehicle Emissions")
g <- ggplot(motor_vehicle_emissions[fips == "24510" | fips == "06037"], aes(year, fips)
g <- ggplot(motor_vehicle_emissions[fips == "24510" | fips == "06037"], aes(year, fips))
g + geom_point() + geom_line(aes(color = fips)) + scale_color_discrete(name = "County", breaks = c("06037", "24510"), labels = c("Los Angeles", "Baltimore")) + labs(x = "Year") + labs(y = expression("Total Emissions, PM"[2.5])) + labs(title = "Annual Motor Vehicle Emissions")
g <- ggplot(motor_vehicle_emissions[fips == "24510" | fips == "06037"], aes(year, Emissions))
g + geom_point() + geom_line(aes(color = fips)) + scale_color_discrete(name = "County", breaks = c("06037", "24510"), labels = c("Los Angeles", "Baltimore")) + labs(x = "Year") + labs(y = expression("Total Emissions, PM"[2.5])) + labs(title = "Annual Motor Vehicle Emissions")
source('C:/Users/i55802/datasciencecoursera/plot1.R')
source('C:/Users/i55802/datasciencecoursera/plot2.R')
source('C:/Users/i55802/datasciencecoursera/plot3.R')
qplot(year, Emissions, data = total_emissions_baltimore_type, group = Pollutant_Type, color = Pollutant_Type, geom = c("point", "line"), ylab = expression("Total PM2.5 Emissions"[2.5]), xlab = "Year", main = "Total Emissions in Baltimore City by Pollutant Type")
qplot(year, Emissions, data = total_emissions_baltimore_type, group = Pollutant_Type, color = Pollutant_Type, geom = c("point", "line"), ylab = expression("PM2.5 Emissions"), xlab = "Year", main = "Total Emissions Baltimore by Pollutant Type")
g <- ggplot(coal_emissions, aes(year, Emissions))
g + geom_point(color = "red") + geom_line(color = "green") + labs(x = "Year") +
labs(y = expression("Total Emissions, PM"[2.5])) + labs(title = "Emissions from Coal Combustion for the US")
g + geom_point(color = "red") + geom_line(color = "red") + labs(x = "Year") + labs(y = expression("PM2.5 Emissions")) + labs(title = "Coal Emissions")
mv_scc <- SCC_DT[grep("[Mm]obile|[Vv]ehicles", EI.Sector), SCC]
mv_emissions_baltimore <- NEI_DT[SCC %in% mv_scc, sum(Emissions), by = c("year", "fips")][fips == "24510"]
colnames(mv_emissions_baltimore) <- c("year", "fips", "Emissions")
g <- ggplot(mv_emissions_baltimore, aes(year, Emissions))
g + geom_point(color = "red") + geom_line(color = "red") + labs(x = "Year") + labs(y = expression("PM2.5 Emissions")) + labs(title = "Motor Vehicle Emissions: Baltimore City")
mv_emissions <- NEI_dt[SCC %in% mv_scc, sum(Emissions), by = c("year", "fips")]
colnames(mv_emissions) <- c("year", "fips", "Emissions")
g <- ggplot(mv_emissions[fips == "24510" | fips == "06037"], aes(year, Emissions))
g + geom_point() + geom_line(aes(color = fips)) + scale_color_discrete(name = "County", breaks = c("06037", "24510"), labels = c("Los Angeles", "Baltimore")) + labs(x = "Year") + labs(y = expression("PM2.5 Emissions")) + labs(title = "Motor Vehicle Emissions")
emissions_baltimore <- with(NEI_baltimore, aggregate(Emissions, by = list(year), sum))
colnames(emissions_baltimore) <- c("year", "Emissions")
plot(emissions_baltimore$year, emissions_baltimore$Emissions, type = "b", pch = 18, col = "red", ylab = "PM2.5 Emissions", xlab = "Year", main = "Total Emissions: Baltimore")
setwd("C:/Users/i55802/RepData_Assessment1")
getwd
getwd()
setwd(C:/Users/i55802/RepData_Assessment1)
setwd("C:/Users/i55802/RepData_PeerAssessment1")
source('~/.active-rstudio-document', echo=TRUE)
library(knitr)
knit2("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.md")
